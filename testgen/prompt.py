def build_prompt(criterion_text: str, target_framework: str = "pytest") -> dict:
    """Builds system and user prompt for the OpenAI API."""
    system = (
        "As an expert software testing analyst, analyze the following test results and acceptance criteria coverage."
        "When asked to provide code, output only the code file contents and nothing else."
    )

    user = f"""
    Requirement specification:
    {criterion_text}
    
    
    Task:
    1) Generate a Python file that contains unit tests to validate the specification above.
    2) Use plain {target_framework} style (functions named test_* and pytest.raises for exceptions).
    3) Include necessary helper functions inside the test file (do not assume any external fixtures).
    4) Do not include commentary, installation instructions, or markdown fences â€” output only the Python source code.
    5) At the very top of the file, include this exact comment: "# GENERATED BY testgen - do not edit"
    
    
    Constraints:
    - Keep tests deterministic (no randomness).
    - Prefer small example values, edge cases, and explicit exception checks.
    - Assume the module under test will be imported as `from your_module import <function>`; include a short comment showing this import so users can update it.
    """

    return {"system": system, "user": user.strip()}
